#!/usr/bin/env bash

cmd="${1}" ; shift

## Global utility functions #######################################################################
function delete-tmp-password() {
  test -f "$(pwd)/.pass" && rm -f "$(pwd)/.pass"
}
export -f delete-tmp-password

function pprint() {
  local blue='\033[1;34m'
  local green='\033[1;32m'
  local red='\033[1;31m'
  local normal='\033[0m'
  local white='\033[1;37m'

  while (( "$#" )); do
    case "${1}" in
      -n) local n='-n' ; shift ;;
      -q) local q='-q' ; shift ;;
      *)
        test -n "${1}" && test -n "${adj}" && local msg=${1}
        test -n "${1}" && test -z "${adj}" && local adj=${1}
        shift
      ;;
    esac
  done

  if [ -z "${q}" ]; then
    case "${adj}" in
      bad) echo -e ${n} "${red}${msg}${normal}" ;;
      good) echo -e ${n} "${green}${msg}${normal}" ;;
      head) echo -e ${n} "${blue}==>${normal} ${white}${msg}${normal}" ;;
      subhead) echo -e ${n} "${green}==>${normal} ${white}${msg}${normal}" ;;
      *) echo ${n} "${msg}" ;;
    esac
  fi
}
export -f pprint

function write-tmp-password() {
  echo "${1}" > "$(pwd)/.pass"
}
export -f write-tmp-password

## Argument and option parsing ####################################################################
while (( "$#" )); do
  case "${1}" in
    --password=*) password=${1/--password=/''} ; shift ;;
    --quiet) quiet='-q' ; shift ;;
    --role=*) role=${1/--role=/''} ; shift ;;
    -p*) password=${2} ; shift ; shift ;;
    -q) quiet='-q' ; shift ;;
    -r*) role=${2} ; shift ; shift ;;
    *)
      case "${cmd}" in
        decrypt|encrypt) test -n "${1}" && test -z "${password}" && password=${1} ;;
      esac
      case "${cmd}" in
        ls) test -n "${1}" && test -z "${role}" && role=${1} ;;
      esac
      shift
    ;;
  esac
done

## Argument and option prompting ##################################################################
case "${cmd}" in
  decrypt|encrypt) test -z "${password}" && read -e -p 'Enter password: ' -s password ; echo ;;
esac

## Command utility functions ######################################################################
function count-inventory-role() {
  local upper=$(slice-inventory-role "${1}" | tail -c 3 | head -c 1)
  echo "$(( upper + 1 ))"
}
export -f count-inventory-role

function decrypt-blueprint() {
  if [ "$(find $(pwd) -type d | grep -v '.git' | wc -l | tr ' ' '\0')" -gt 1 ]; then
    find $(pwd)/**/* -type f | grep -v '.git' | grep -v '.DS_Store' | \
      xargs -P 2 -I{} ansible-vault decrypt '{}' --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1
  fi

  ansible-vault decrypt "$(pwd)/hykes.ini" --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1 && \
  ansible-vault decrypt "$(pwd)/hykes.yml" --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1
}
export -f decrypt-blueprint

function encrypt-blueprint() {
  if [ "$(find $(pwd) -type d | grep -v '.git' | wc -l | tr ' ' '\0')" -gt 1 ]; then
    find $(pwd)/**/* -type f | grep -v '.git' | grep -v '.DS_Store' | \
      xargs -P 2 -I{} ansible-vault encrypt '{}' --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1
  fi

  ansible-vault encrypt "$(pwd)/hykes.ini" --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1 && \
  ansible-vault encrypt "$(pwd)/hykes.yml" --vault-password-file="$(pwd)/.pass" > /dev/null 2>&1
}
export -f encrypt-blueprint

function read-inventory() {
  test -f "$(pwd)/hykes.ini" && tr ' ' '\n' < "$(pwd)/hykes.ini" | egrep --color=never '^.+\[[0-9\:]+\]\.'
}
export -f read-inventory

function slice-inventory-role() {
  echo "$(echo "${1}" | egrep --color=never -o '\[[0-9\:]+\]')"
}
export -f slice-inventory-role

function state-crypto() {
  head -n 1 "$(pwd)/hykes.yml" 2>/dev/null | grep -q '$ANSIBLE_VAULT'
}
export -f state-crypto

function unfurl-inventory-role() {
  local count=$(count-inventory-role ${1})
  local slice=$(slice-inventory-role ${1})

  for ((i=0; i<=count-1; i++)); do
    echo ${1/"$slice"/"$i"}
  done
}
export -f unfurl-inventory-role

## Command functions ##############################################################################
function decrypt() {
  pprint head 'Decrypting' ${quiet}
  { state-crypto || \
    { pprint bad 'failed (blueprint should be encrypted)' ${quiet} ; return 1; }; } && \
  { write-tmp-password "${password}" && decrypt-blueprint || \
    { pprint bad 'failed' ${quiet} ; return 1; }; }
}

function decrypted() {
  pprint head 'Decrypted' ${quiet}
  state-crypto
  case "$?" in
    0) echo 'false' ; return 1 ;;
    *) echo 'true' ;;
  esac
}

function encrypt() {
  pprint head 'Encrypting' ${quiet}
  { ! state-crypto || \
    { pprint bad 'failed (blueprint should be decrypted)' ${quiet} ; return 1; }; } && \
  { write-tmp-password "${password}" && encrypt-blueprint || \
    { pprint bad 'failed' ${quiet} ; return 1; }; }
}

function encrypted() {
  pprint head 'Encrypted' ${quiet}
  state-crypto
  case "$?" in
    0) echo 'true' ;;
    *) echo 'false' ; return 1 ;;
  esac
}

function help() {
  local a=(${0//\// })
  local bin=${a[${#a[@]}-1]}

  echo 'Usage:'
  echo "  ${bin} decrypt <password> [--quiet|-q]"
  echo "  ${bin} decrypted [--quiet|-q]"
  echo "  ${bin} encrypt <password> [--quiet|-q]"
  echo "  ${bin} encrypted [--quiet|-q]"
  echo "  ${bin} ls [role] [--quiet|-q]"
  echo
  echo 'Cryptography Commands:'
  echo '  decrypt      Decrypt blueprint'
  echo '  decrypted    Output boolean indicating if decrypted'
  echo '  encrypt      Encrypt blueprint'
  echo '  encrypted    Output boolean indicating if encrypted'
  echo
  echo 'Discovery Commands:'
  echo '  ls    Output unfurled servers from blueprint inventory'
  echo
  echo 'More Information:'
  echo '  docs     https://developers.cloud-elements.com'
  echo '  forum    https://forum.cloud-elements.com'
  echo '  repo     https://github.com/cloud-elements/hykes-blueprint'
}

function ls() {
  pprint head 'Listing' ${quiet}
  state-crypto
  case "$?" in
    0) pprint bad 'failed (blueprint should be decrypted)' ${quiet} ; return 1 ;;
    *)
      local inv="$(read-inventory)"
      local unfurl="$(echo "${inv}" | xargs -I{} bash -c '! unfurl-inventory-role {}')"
      case "${role}" in
        '') echo "${unfurl}" ;;
        *) echo "$(echo "${unfurl}" | grep "${role}")" ;;
      esac
    ;;
  esac
}

function version() {
  echo 'v0.1.0'
}

## Traps ##########################################################################################
trap "delete-tmp-password" 0

## Command routing ################################################################################
case "${cmd}" in
  --help|-h) help ; exit 0 ;;
  --version|-v) version ; exit 0 ;;
  decrypt|decrypted|encrypt|encrypted|ls) "${cmd}" ; exit "$?" ;;
  *) help ; exit 1 ;;
esac
